# Attribute write handeler
import "ble_att_handler.bgs"

# Bluetooth services
dim buzzer
const bit_mask = $0008


# Constants:
const endpoint_uart1   = 2

# LED0 is mapped to pin F6
const led_bank      = 5
const led_pin_mask  = $40

# Variables:
dim ticker
dim string(6)
dim connected
dim conn_handle
dim res
dim n
dim adc_value
dim adc_conv
dim voltage_high
dim voltage_low
dim temp



# Variable definitions
dim advdata(30) # Buffer with 30 bytes for holding the iBeacon advertising data. 

# print a nibble
procedure print_nibble(nibble)

	n = nibble

	if n < $a then
		n = n + $30
	else
		n = n + $37
	end if

	call endpoint_send(endpoint_uart1, 1, n)
end

# print hex values (range 0..255 -> output 0x00..0xFF)
procedure print_hex(hex)
	call print_nibble(hex/16)
	call print_nibble(hex&$f)
end

# print 16-bit hex values (range 0..65535 -> output 0x00..0xFFFF)
procedure print_hex16(hex)
	
	temp = (hex >> 8) & $ff
	call print_nibble(temp/16)
	call print_nibble(temp&$f)
	
	temp = hex & $ff
	call print_nibble(temp/16)
	call print_nibble(temp&$f)
end

# this is a utility function to print passkey but we can use it also to print
# out ADC values...
procedure print_passkey(data)

    string(0:1) = (data / 100000) + (data / -1000000 * 10) + 48
    string(1:1) = (data / 10000) + (data / -100000 * 10) + 48
	string(2:1) = (data / 1000) + (data / -10000 * 10) + 48
	string(3:1) = (data / 100) + (data / -1000 * 10) + 48
	string(4:1) = (data / 10) + (data / -100 * 10) + 48
	string(5:1) = data + (data / 10 * -10) + 48
	
	call endpoint_send(endpoint_uart1, 6, string(0:6))
	
end 



# A procedure to initialize iBeacon data
procedure init_iBeacon_data()
	
	# Initialize iBeacon advertisement data

	# Flags - See Bluetooth 4.0 Core Specification , Volume 3, Appendix C, 18.1.
	advdata(0:1) = $02 # Length of the Flags field - 2 bytes-  
	advdata(1:1) = $01 # Type of the Flags field.
	advdata(2:1) = $06 # Flags field. Device in LE General discoverable mode and BR/EDR disabled.
	
	# Manufacturer data
	advdata(3:1) = $1a # Length of the Manufacturer Data field - 26 bytes - 
	advdata(4:1) = $ff # Data type - manufacturer specific data - Type of the Manufacturer Data field.
	advdata(5:1) = $00 # Manufacturer data, Battery mV High Byte
	advdata(6:1) = $00 # Manufacturer data, Battery mV Low Byte
	advdata(7:1) = $0A # TIIPS
	advdata(8:1) = $0D # TIIPS
	advdata(9:1)  = $FF # TIIPS Device Code
	advdata(10:1) = $01 # TIIPS Device Code
	advdata(11:1) = $00
	advdata(12:1) = $03
	advdata(13:1) = $00
	advdata(14:1) = $00
	advdata(15:1) = $00
	advdata(16:1) = $00
	advdata(17:1) = $00
	advdata(18:1) = $00
	advdata(19:1) = $00
	advdata(20:1) = $00
	advdata(21:1) = $00
	advdata(22:1) = $00
	advdata(23:1) = $00
	advdata(24:1) = $FA
	
	# The Major value, which is used to group related beacons -- NOT NEEDED but leaving 
	advdata(25:1) = $00
	advdata(26:1) = $00
	
	# The Minor value, which is used to specify individual beacon within a group -- NOT NEEDED
	advdata(27:1) = $00
	advdata(28:1) = $00
	
	# Signal power (calibrated RSSI) - The Beacon's measured RSSI at 1 meter distance in dBm. 
	# See the iBeacon specification for measurement guidelines. --??? come back later
	advdata(29:1) = $c3
	
end
 

# Boot event listener - Generated =[7when the module is powered up or reset
event system_boot(major, minor, patch, build, bootloader, hw)

	call endpoint_send(endpoint_uart1, 20, "Boot. Build number: ")	
	call print_passkey(build)
	call endpoint_send(endpoint_uart1, 2, "\r\n")
	call init_iBeacon_data()
	# Set advertisement interval to 100ms, use all three ADV channels, change channel to single 
	call le_gap_set_adv_parameters($160, $160, $07)
	
	# Set bigger MTU to speed up transfer data
	call gatt_set_max_mtu(MTU_SIZE)

	# Set default max payload data = 23(Default MTU) - 1
	maxPayload = 22

	# Set undefined connection handle
	attHandler_connection = CONNECTION_HANDLE_UNDEFINED
	
    # turn off buzzer	
	buzzer = 0
	
	# Start Bluetooth LE advertisements and enable connections
	call le_gap_set_mode(le_gap_general_discoverable,$2)
			
	# setup timer with 1000ms interval
	call hardware_set_soft_timer(32768,0,0)
		
	# configure ADC reference voltage:
	call endpoint_send(endpoint_uart1, 21, "ADC reference: VDD \r\n")
	call hardware_config_adc_reference(3)(res)
	
	call system_set_tx_power(0.0)
	 
end

# BLE connection opened event - Generated when a BLE connection is opened
# -----------------------------------------------------------------------
event le_connection_opened(address,address_type,master,connection,bonding)

	# Request connection parameters update according to Apple guidelines to save power while connected
	# https://developer.apple.com/hardwaredrivers/BluetoothDesignGuidelines.pdf
	# Min: 875ms, Max: 950ms, latency 1, timeout: 6000ms
	# call le_connection_set_parameters(connection, $02bc, $02f8, $0001, $0258)
	  
	# TODO: Add your own code here
end

# Disconnect event listener - generated when connection is closed
# ---------------------------------------------------------------
event le_connection_closed(reason,connection)

	# Service disconnect handlers
  
	# Set default max payload data = 23(Default MTU) - 1
	maxPayload = 22

	# Set undefined connection handle
	attHandler_connection = CONNECTION_HANDLE_UNDEFINED

	# TODO: Add your own code here.
	
	# Restart advertising
	call le_gap_set_mode($2, $2)
end

# This event is generated when a remote device writes a characteristic to the GATT database. 
# This event is only generated for characteristics where type="user" is NOT set.
# -------------------------------------------------------------------------------------------
event gatt_server_attribute_value(connection, attribute, att_opcode, offset, value_len, value_data)

	# Characteristic value handlers
	# Buzzer service
	#if (attribute >= xgatt_buzzer && attribute <= xgatt_buzzer) then
	#	call buzzer_valueChangeCallback(connection, attribute, att_opcode, offset, value_len, value_data(0:value_len))
	#end if   
  
	# TODO: Add your own code here.
	if attribute = xgatt_buzzer then
      
		if buzzer = 0 then
			call hardware_write_gpio(0,bit_mask,$ffff)
			buzzer = 1
		
		else
			call hardware_write_gpio(0,bit_mask,$0000)
			buzzer = 0
		end if
    end if
end

# This event is generated when an attribute indication or notification status is changed
#---------------------------------------------------------------------------------------
event gatt_server_characteristic_status(connection, characteristic, status_flags, client_config_flags)

end

# This event indicates that a GATT MTU exchange procedure has been completed.
#----------------------------------------------------------------------------
event gatt_mtu_exchanged(connection, mtu)
	maxPayload = mtu - 1
end



# Software timer event - generated when software timer runs out
event hardware_soft_timer(handle)
	# ADC test: 

	# read voltage at pin PF5 with 5 volt differential reference 
	call hardware_read_adc(5, 5)(res, adc_value)
	
	# convert raw ADC value to millivolts:
	adc_conv = adc_value * 5000 / 4096

	
	# covert from little endien to big endien 
	voltage_high = (adc_conv >> 8) & $ff 
	voltage_low = (adc_conv & $FF)
	
	call endpoint_send(endpoint_uart1, 1, voltage_high)
	call endpoint_send(endpoint_uart1, 1, voltage_low)
	
	
	# Set custom advertisement data
	advdata(5:1) = voltage_high 
	advdata(6:1) = voltage_low 
	call le_gap_set_adv_data(0, 30, advdata(0:30))
		
end

# End of BGScript